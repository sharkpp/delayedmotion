{"version":3,"sources":["serviceWorker.js","misc/constants.js","views/UploadImage.js","views/SelectArea.js","views/DownloadImage.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","ImageSourceType","Step","UploadImage","SelectArea","DownloadImage","onNextStep","useState","imageSrcType","setImageSrcType","imageUrl","setImageUrl","invalidImageUrl","setInvalidImageUrl","loadingImageUrl","setLoadingImageUrl","useDropzone","accept","onDrop","files","reader","FileReader","onload","image","Image","src","result","readAsDataURL","disabled","rejectedFiles","getRootProps","getInputProps","rejectedFilesItems","map","file","key","path","handleSelectImageUrl","useCallback","e","target","value","handleSelectedImageUrl","crossOrigin","err","onerror","Tabs","activeKey","onSelect","k","Tab","eventKey","title","className","InputGroup","FormControl","placeholder","onChange","isInvalid","readOnly","Append","Button","variant","onClick","Spinner","as","animation","size","role","aria-hidden","Form","Control","Feedback","type","createRef","canvasRef","canvasMaskRef","canvasOffscreenRef","crop","setCrop","useEffect","canvas","current","width","height","getContext","drawImage","canvasOffscreen","handleChangeArea","newCrop","Object","assign","Math","floor","ctx","scale","clientWidth","ctxOffscreen","xiMax","yiMax","canvasMask","ctxMask","fillStyle","fillRect","beginPath","ellipse","PI","fill","maskData","getImageData","data","xyStep","xOffset","x","yOffset","y","yi","xi","random","handleAreaLock","toBlob","imageBlob","cropValid","Card","Text","Group","renderComponent","ref","style","onComplete","display","FileDownload","require","prevewImage","setPrevewImage","handleDownload","handleNext","Row","Col","left","top","Steps","Title","App","step","setStep","setImage","image2","setImage2","handelUploadImageFinish","selectedImage","handelSelectAreaFinish","generatedImage","handelDownloadImageFinish","steps","activeStep","Body","href","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4f47f42.chunk.js","sourcesContent":["\"use struct\";\n\n// このオプションのコードは、Service Workerを登録するために使用されます。\n// register() はデフォルトでは呼び出されません。\n\n// これにより、その後の実稼働時のアクセスでアプリの読み込みが速くなり、\n// オフライン機能が提供されます。 ただし、開発者（およびユーザー）は、\n// 以前にキャッシュされたリソースがバックグラウンドで更新されるため、\n// ページで開いている既存のタブがすべて閉じられた後、ページへの以降の\n// アクセスでのみ展開された更新が表示されます。\n\n// このモデルの利点とオプトイン方法の詳細については、\n// https://bit.ly/CRA-PWA をご覧ください。\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] は IPv6 localhost アドレスです。\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 は IPv4 のローカルホストと見なされます。\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // URLコンストラクターは、SWをサポートするすべてのブラウザーで使用できます。\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // PUBLIC_URL がページの配信元と異なる発信元にある場合サービスワーカーは機能しません。\n      // これは、アセットの提供にCDNが使用されている場合に発生する可能性があります。\n      // https://github.com/facebook/create-react-app/issues/2374 を参照してください\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // これはローカルホストで実行されています。 Service Workerがまだ存在するかどうかを確認しましょう。\n        checkValidServiceWorker(swUrl, config);\n\n        // いくつかの追加のログを localhost に追加し、開発者に\n        // service worker/PWA ドキュメントを参照させます。\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // ローカルホストではありません。サービスワーカーを登録するだけです。\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // この時点で更新された事前キャッシュされたコンテンツが取得されましたが、\n              // 以前のサービスワーカーは、すべてのクライアントタブが閉じられるまで\n              // 古いコンテンツを引き続き提供します。\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // コールバックを実行\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // この時点ですべてが事前にキャッシュされています。\n              // \"コンテンツはオフラインで使用するためにキャッシュされます。\"\n              // メッセージを表示するのに最適なタイミングです。\n              console.log('Content is cached for offline use.');\n\n              // コールバックを実行\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // ページをリロードできない場合、サービスワーカーが見つかるかどうかを確認します。\n  fetch(swUrl)\n    .then(response => {\n      // Service Worker が存在し、JSファイルを実際に取得していることを確認してください。\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // サービスワーカーが見つかりません。おそらく別のアプリ。ページをリロード。\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // サービスワーカーが見つかりました。通常どおり続行。\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\"use struct\";\n\n// 画像の元の場所\nexport const ImageSourceType = {\n  FromLocal: 0,\n  FromUrl:   1,\n};\n\n// 処理のステップの状態\nexport const Step = {\n  UploadImage:   0,\n  SelectArea:    1,\n  DownloadImage: 2,\n};\n","\"use struct\";\n\nimport React, { useState, useCallback } from 'react';\n\nimport { Tabs, Tab, Form, FormControl, InputGroup, Button, Spinner } from 'react-bootstrap';\n\nimport {useDropzone} from 'react-dropzone'\nimport 'react-dropzone/examples/theme.css';\n\nimport { ImageSourceType } from '../misc/constants';\n\nimport './UploadImage.css';\n\nexport default function ({ onNextStep }) {\n\n  const [ imageSrcType, setImageSrcType ] = useState(ImageSourceType.FromLocal);\n  const [ imageUrl, setImageUrl ] = useState('');\n  const [ invalidImageUrl, setInvalidImageUrl ] = useState(false);\n  const [ loadingImageUrl, setLoadingImageUrl ] = useState(false);\n\n  const handleDrop = (files) => {\n    if (files[0]) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const image = new Image();\n        image.src = reader.result;\n        image.onload = () => {\n          onNextStep(image);\n        }\n      }\n      reader.readAsDataURL(files[0]);\n    }\n  };\n\n  const {\n    rejectedFiles,\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    accept: 'image/jpeg, image/png',\n    onDrop: handleDrop,\n    disabled: loadingImageUrl,\n  });\n\n  const rejectedFilesItems = rejectedFiles.map(file => (\n    <li key={file.path}>\n      {file.path} は利用できません。\n    </li>\n  ));\n\n  const handleSelectImageUrl = useCallback((e) => {\n    setInvalidImageUrl(false);\n    setImageUrl(e.target.value);\n  });\n  const handleSelectedImageUrl = useCallback(() => {\n    setLoadingImageUrl(true);\n    setInvalidImageUrl(false);\n    const image = new Image();\n    image.crossOrigin = \"anonymous\";\n    image.src = 'https://api-gw98.herokuapp.com/' + imageUrl;\n    image.onload = (err) => {\n      setLoadingImageUrl(false);\n      onNextStep(image);\n    }\n    image.onerror = (err) => {\n      setLoadingImageUrl(false);\n      setInvalidImageUrl(true);\n    }\n  });\n\n  return (\n    <>\n      <Tabs activeKey={imageSrcType} onSelect={k => setImageSrcType(k)}>\n\n        <Tab eventKey={ImageSourceType.FromLocal} title=\"画像のアップロード\">\n          <div {...getRootProps({className: 'dropzone'+(loadingImageUrl?' disabled':'')})}>\n            <input {...getInputProps()} />\n            <p>画像をここにドロップするか、クリックして選択してください</p>\n            <em>jpeg もしくは png のみ指定可能)</em>\n          </div>\n          <ol>\n            {rejectedFilesItems}\n          </ol>\n        </Tab>\n\n        <Tab eventKey={ImageSourceType.FromUrl} title=\"画像のURLを指定\">\n          <InputGroup className=\"mb-3\">\n            <FormControl\n              placeholder=\"画像のURL\"\n              value={imageUrl}\n              onChange={handleSelectImageUrl}\n              isInvalid={invalidImageUrl}\n              readOnly={loadingImageUrl}\n            />\n            <InputGroup.Append>\n              <Button \n                variant=\"outline-primary\"\n                onClick={handleSelectedImageUrl}\n                disabled={!imageUrl || loadingImageUrl}\n              >\n                {loadingImageUrl && <Spinner\n                  as=\"span\"\n                  animation=\"border\"\n                  size=\"sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                  className=\"btn-inner-spinner\"\n                />}\n                画像を選択\n              </Button>\n            </InputGroup.Append>\n            <Form.Control.Feedback type=\"invalid\">\n              指定したURLは画像として利用できませんでした\n            </Form.Control.Feedback>\n          </InputGroup>\n        </Tab>\n\n      </Tabs>\n    </>\n  );\n}\n","\"use struct\";\n\nimport React, { useState, useEffect, useCallback, createRef } from 'react';\nimport { Button, Card, Form } from 'react-bootstrap';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport './SelectArea.css';\n\nconst BlockSize = 5;\n\nexport default function ({ onNextStep, image }) {\n\n  const [ canvasRef, setCanvasRef ] = useState(createRef());\n  const [ canvasMaskRef, setCanvasMaskRef ] = useState(createRef());\n  const [ canvasOffscreenRef, setCanvasOffscreenRef ] = useState(createRef());\n  const [crop, setCrop] = useState({ });\n\n  useEffect(() => {\n\n    // 画像を描画\n    const canvas = canvasRef.current;\n    canvas.width = image.width;\n    canvas.height= image.height;\n    const ctx    = canvas.getContext('2d');\n    ctx.drawImage(image, 0, 0, image.width, image.height);\n\n    const canvasOffscreen = canvasOffscreenRef.current;\n    canvasOffscreen.width = image.width;\n    canvasOffscreen.height= image.height;\n\n  }, [image]);\n\n  // 範囲変更\n  const handleChangeArea = useCallback(() => {\n    const newCrop = Object.assign({}, crop, {\n      // 領域を丸める\n      width:  Math.floor(crop.width  / BlockSize) * BlockSize + 1,\n      height: Math.floor(crop.height / BlockSize) * BlockSize + 1,\n    });\n\n    const canvas = canvasRef.current;\n    const ctx    = canvas.getContext('2d');\n    const scale  = image.width / canvas.clientWidth;\n\n    const canvasOffscreen = canvasOffscreenRef.current;\n    const ctxOffscreen    = canvasOffscreen.getContext('2d');\n    ctxOffscreen.drawImage(image, 0, 0, image.width, image.height);\n\n    const xiMax = Math.floor(newCrop.width  / BlockSize);\n    const yiMax = Math.floor(newCrop.height / BlockSize);\n    const canvasMask = canvasMaskRef.current;\n    canvasMask.width = xiMax;\n    canvasMask.height= yiMax;\n    const ctxMask    = canvasMask.getContext('2d');\n\n    if (canvasMask.width < 1 || canvasMask.height < 1) {\n      ctx.drawImage(canvasOffscreen, 0, 0);\n      return;\n    }\n\n    ctxMask.fillStyle = '#000000';\n    ctxMask.fillRect(0, 0, canvasMask.width, canvasMask.height);\n    ctxMask.fillStyle = '#FF0000';\n    ctxMask.beginPath();\n    ctxMask.ellipse(canvasMask.width / 2, canvasMask.height / 2, canvasMask.width / 2 * 0.9, canvasMask.height / 2 * 0.9, 0, 0, 2 * Math.PI);\n    ctxMask.fill();\n    const maskData = ctxMask.getImageData(0, 0, canvasMask.width, canvasMask.height).data; // [ R(0,0), G(0,0), B(0,0), alpha(0,0), ... ]\n\n    const xyStep  = 5 * scale;\n    const xOffset = newCrop.x * scale;\n    const xMax    = xOffset + newCrop.width * scale;\n    const yOffset = newCrop.y * scale;\n    const yMax    = yOffset + newCrop.height * scale;\n\n    ctxOffscreen.fillStyle = 'rgb(0,0,0,0.5)';\n    ctxOffscreen.fillRect(newCrop.x * scale, newCrop.y * scale,\n                          Math.floor((newCrop.width  + 1) / BlockSize) * xyStep,\n                          Math.floor((newCrop.height + 1) / BlockSize) * xyStep);\n\n    for (let y = yOffset, yi = 0; yi < yiMax; y += xyStep, ++yi) {\n      for (let x = xOffset, xi = 0; xi < xiMax; x += xyStep, ++xi) {\n        if (0 == maskData[(xi + yi * xiMax) * 4 + 0] && Math.random() < 0.3) {\n          ctxOffscreen.fillStyle = '#FFFFFF';\n          ctxOffscreen.fillRect(x, y, xyStep + scale, xyStep + scale);\n        }\n      }\n    }\n\n    ctx.drawImage(canvasOffscreen, 0, 0);\n\n    setCrop(newCrop);\n  }, [canvasRef, canvasOffscreenRef, canvasMaskRef, crop]);\n\n  // 範囲確定\n  const handleAreaLock = useCallback(() => {\n    const canvas = canvasRef.current;\n    canvas.toBlob((imageBlob) => {\n      onNextStep(imageBlob);\n    }, 'image/jpeg', 0.9);\n  }, [image, crop]);\n  \n  const cropValid = crop.width && crop.height;\n\n  return (\n    <>\n      <Card.Text>\n        <Form.Group>\n          <Button disabled={!cropValid} onClick={handleAreaLock} >\n            選択完了\n          </Button>\n        </Form.Group>\n        <ReactCrop\n          renderComponent={\n            <canvas ref={canvasRef} style={{ width: '100%' }} />\n          }\n          crop={crop}\n          onChange={newCrop => setCrop(newCrop)}\n          onComplete={() => handleChangeArea()}\n        />\n      </Card.Text>\n      <canvas ref={canvasOffscreenRef} style={{ width: '100%', display: 'none' }} />\n      <canvas ref={canvasMaskRef} style={{ display: 'none' }} />\n    </>\n  );\n}\n","\"use struct\";\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Button, Form, Row, Col } from 'react-bootstrap';\nimport './DownloadImage.css';\nconst FileDownload = require('js-file-download');\n\nexport default function ({ image, onNextStep }) {\n\n  const [ prevewImage, setPrevewImage ] = useState('');\n\n  useEffect(() => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      setPrevewImage(e.target.result);\n    };\n    reader.readAsDataURL(image);\n  }, [image]);\n\n  const handleDownload = useCallback(() => {\n    FileDownload(image, 'sample.jpg', 'image/jpeg');\n  }, [image]);\n\n  const handleNext = useCallback(() => {\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <>\n      <Form.Row>\n        <Form.Group as={Col}>\n          <Button onClick={handleDownload} >\n            ダウンロード\n          </Button>\n        </Form.Group>\n        <Form.Group as={Col}>\n          <Button variant=\"secondary\" onClick={handleNext} >\n            最初からやり直す\n          </Button>\n        </Form.Group>\n      </Form.Row>\n      <div className=\"image-preview\">\n        <img src={prevewImage} className=\"layout\" />\n        <img src={prevewImage} className=\"main\" style={{ left: 0, top: 0 }} />\n      </div>\n    </>\n  );\n}\n","\"use struct\";\n\nimport React, { useState, useCallback } from 'react';\nimport './App.css';\nimport { Card, Row, Col, Button, Nav, Navbar, NavDropdown } from 'react-bootstrap'\nimport Stepper from 'react-stepper-horizontal';\n\nimport UploadImageView from './views/UploadImage';\nimport SelectAreaView from './views/SelectArea';\nimport DownloadImageView from './views/DownloadImage';\n\nimport { Step } from './misc/constants';\n\nconst Steps = [\n  { title: '画像をアップロード' },\n  { title: '揺らす範囲を設定' },\n  { title: '完成'}\n];\n\nconst Title = '揺れる画像ジェネレータ';\n\nfunction App() {\n\n  const [ step,  setStep  ] = useState(Step.UploadImage);\n  const [ image, setImage ] = useState(null);\n  const [ image2, setImage2 ] = useState(null);\n\n  const handelUploadImageFinish = useCallback((selectedImage) => {\n    setImage(selectedImage);\n    setStep(Step.SelectArea);\n  });\n\n  const handelSelectAreaFinish = useCallback((generatedImage) => {\n    setImage2(generatedImage);\n    setStep(Step.DownloadImage);\n  });\n\n  const handelDownloadImageFinish = useCallback(() => {\n    setStep(Step.UploadImage);\n  });\n\n  return (\n    <div className=\"App\">\n      <h1>\n        {Title}\n      </h1>\n      <div className=\"stepper\">\n        <Stepper steps={Steps} activeStep={step} />\n      </div>\n      <Card>\n        <Card.Body>\n          {[\n            <UploadImageView   onNextStep={handelUploadImageFinish} />,\n            <SelectAreaView    onNextStep={handelSelectAreaFinish}    image={image} />,\n            <DownloadImageView onNextStep={handelDownloadImageFinish} image={image2} />\n          ][step]}\n        </Card.Body>\n      </Card>\n      <div className=\"footer\">\n          <Button variant=\"link\" size=\"sm\" href=\"https://twitter.com/sharkpp\">\n            @sharkpp\n          </Button>\n          <Button variant=\"link\" size=\"sm\" href=\"https://github.com/sharkpp/delayedmotion/issues/new\">\n            不具合報告\n          </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","\"use struct\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// アプリをオフラインで動作させてより速くロードしたい場合は、以下で unregister() を\n// register() に変更できます。これにはいくつかの落とし穴があります。\n// サービスワーカーの詳細: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n\n// 要求スペック\n//   config#onUpdate(registration);\n//   config#onSuccess(registration);\n// serviceWorker.register(config);\n"],"sourceRoot":""}